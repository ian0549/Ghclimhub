###############################################################################
#                                   Helpers.                                  #
###############################################################################



import ee
import datetime as dt
import json
import urllib
from chart import get_time_series, set_time_series_data


##############################################################################
#                               Initialization.                               #
###############################################################################

#############################


try:
   ee.Initialize()
except :
	pass
###ee.Initialize()###
geometryGH =ee.Geometry.Polygon(
		[[[-2.84271240234375, 10.964407406892343],
		  [-2.81524658203125, 10.93204830297375],
		  [-2.8619384765625, 10.891594459751865],
		  [-2.889404296875, 10.783690724613116],
		  [-2.9443359375, 10.71083379257758],
		  [-2.90863037109375, 10.689243182249529],
		  [-2.95257568359375, 10.62716163281584],
		  [-2.9058837890625, 10.52726485464839],
		  [-2.86468505859375, 10.448944731763113],
		  [-2.77130126953125, 10.421933206636895],
		  [-2.8619384765625, 10.323616849342223],
		  [-2.7520751953125, 10.22632559332376],
		  [-2.8179931640625, 10.188482038665908],
		  [-2.7850341796875, 9.961326922955207],
		  [-2.735595703125, 9.842277522029486],
		  [-2.8070068359375, 9.728599402991875],
		  [-2.7520751953125, 9.66903825636035],
		  [-2.779541015625, 9.56613509648869],
		  [-2.7081298828125, 9.479455625458918],
		  [-2.7410888671875, 9.333134455664538],
		  [-2.6641845703125, 9.26808304825559],
		  [-2.7960205078125, 9.159637288435146],
		  [-2.7850341796875, 9.040308729266782],
		  [-2.6641845703125, 9.00775769070097],
		  [-2.6092529296875, 8.779818903544244],
		  [-2.515869140625, 8.203929637502366],
		  [-2.6202392578125, 8.13324302660295],
		  [-2.6806640625, 8.02990943258469],
		  [-2.7410888671875, 7.915668036108836],
		  [-2.779541015625, 7.9646325397584965],
		  [-2.83447265625, 7.839489477618971],
		  [-2.9168701171875, 7.648982348475696],
		  [-2.9937744140625, 7.2949591706812305],
		  [-2.9718017578125, 7.2295700052671],
		  [-3.0926513671875, 7.049701233586126],
		  [-3.251953125, 6.815222222102454],
		  [-3.2794189453125, 6.651564033219323],
		  [-3.0267333984375, 5.863603975677071],
		  [-3.043212890625, 5.710579321395293],
		  [-2.96356201171875, 5.716045197981245],
		  [-2.9827880859375, 5.653184478495978],
		  [-2.9443359375, 5.620384866252641],
		  [-2.867431640625, 5.647718005233668],
		  [-2.76580810546875, 5.587583406107884],
		  [-2.7301025390625, 5.355187750782526],
		  [-2.779541015625, 5.352453150739988],
		  [-2.7829742431640625, 5.276680660689631],
		  [-2.77679443359375, 5.25890327940111],
		  [-2.76580810546875, 5.243860483222971],
		  [-2.7637481689453125, 5.218560418171606],
		  [-2.758941650390625, 5.20009756427037],
		  [-2.7500152587890625, 5.198729923899719],
		  [-2.74658203125, 5.1645379513162695],
		  [-2.7307891845703125, 5.141286355747783],
		  [-2.7431488037109375, 5.123505150776171],
		  [-2.76031494140625, 5.108459129273213],
		  [-2.7870941162109375, 5.118033911163583],
		  [-2.8035736083984375, 5.113930450742871],
		  [-2.8173065185546875, 5.105039529632952],
		  [-2.823486328125, 5.120769536822237],
		  [-2.83447265625, 5.124189052435081],
		  [-2.838592529296875, 5.109143047012258],
		  [-2.8516387939453125, 5.115298273806442],
		  [-2.867431640625, 5.128292447012573],
		  [-2.890777587890625, 5.133079707351237],
		  [-2.89215087890625, 5.123505150776171],
		  [-2.9278564453125, 5.1248729533619555],
		  [-2.948455810546875, 5.129660239345242],
		  [-2.9560089111328125, 5.105039529632952],
		  [-2.9724884033203125, 5.10025205950784],
		  [-2.9937744140625, 5.118717818675223],
		  [-3.0095672607421875, 5.124189052435081],
		  [-3.11187744140625, 5.139117160783533],
		  [-3.11187744140625, 5.0898755229548955],
		  [-2.7520751953125, 5.021478113350183],
		  [-2.27691650390625, 4.9065543621082375],
		  [-2.2487640380859375, 4.879306219346514],
		  [-2.245330810546875, 4.8546761104108125],
		  [-2.2075653076171875, 4.838255537896997],
		  [-2.204132080078125, 4.8211503512890435],
		  [-2.1759796142578125, 4.812255483935228],
		  [-2.1746063232421875, 4.801992031004971],
		  [-2.1718597412109375, 4.788307186898774],
		  [-2.1636199951171875, 4.796518126268445],
		  [-2.1553802490234375, 4.79378115744099],
		  [-2.1196746826171875, 4.787622937499694],
		  [-2.1086883544921875, 4.775990593079715],
		  [-2.11212158203125, 4.766410867141555],
		  [-2.11212158203125, 4.75683100764787],
		  [-2.097015380859375, 4.748619593412709],
		  [-2.0935821533203125, 4.737670889057711],
		  [-2.0798492431640625, 4.74656672457246],
		  [-2.0647430419921875, 4.744513849624847],
		  [-2.05718994140625, 4.739723784344284],
		  [-2.04345703125, 4.752725312760706],
		  [-1.9933319091796875, 4.757515287749456],
		  [-1.9850921630859375, 4.753409596941137],
		  [-1.9782257080078125, 4.755462445404653],
		  [-1.9713592529296875, 4.76777940760151],
		  [-1.9411468505859375, 4.78351742673601],
		  [-1.934967041015625, 4.808150121318067],
		  [-1.91436767578125, 4.814308155958491],
		  [-1.9136810302734375, 4.825939847021319],
		  [-1.89239501953125, 4.824571423116963],
		  [-1.8848419189453125, 4.832097720432811],
		  [-1.856689453125, 4.847150064208675],
		  [-1.8354034423828125, 4.848518442484756],
		  [-1.808624267578125, 4.869043783536398],
		  [-1.772918701171875, 4.87383293975394],
		  [-1.746826171875, 4.877937903630787],
		  [-1.7475128173828125, 4.8854636055353104],
		  [-1.7351531982421875, 4.886831905898856],
		  [-1.7420196533203125, 4.890252644583061],
		  [-1.745452880859375, 4.9011988908909405],
		  [-1.73858642578125, 4.918302041597345],
		  [-1.7049407958984375, 4.933352450864703],
		  [-1.7049407958984375, 4.94908660476962],
		  [-1.69189453125, 4.962084101934849],
		  [-1.643829345703125, 4.968657574204802],
		  [-1.630096435546875, 4.991915381636319],
		  [-1.619110107421875, 5.024748528593368],
		  [-1.355438232421875, 5.072627233101678],
		  [-1.3458251953125, 5.089041973101215],
		  [-1.23870849609375, 5.099984900524659],
		  [-1.175537109375, 5.139651445943173],
		  [-1.09588623046875, 5.184786233557572],
		  [-0.80474853515625, 5.2162419067060934],
		  [-0.7525634765625, 5.265473704920039],
		  [-0.723724365234375, 5.283250898132045],
		  [-0.72509765625, 5.296925315162276],
		  [-0.624847412109375, 5.3229058733002015],
		  [-0.6097412109375, 5.350252643389027],
		  [-0.495758056640625, 5.377598191153183],
		  [-0.462799072265625, 5.4295513422895],
		  [-0.406494140625, 5.470563827447078],
		  [-0.3350830078125, 5.504738751751842],
		  [-0.20599365234375, 5.5438452698044305],
		  [-0.02197265625, 5.609451251001029],
		  [0.06317138671875, 5.696914401910348],
		  [0.37078857421875, 5.787096826137783],
		  [0.89813232421875, 5.7788990149807],
		  [0.97503662109375, 5.833548839091356],
		  [0.98602294921875, 5.920977461018268],
		  [1.043701171875, 6.002929234128989],
		  [1.1370849609375, 6.087599783708456],
		  [1.20025634765625, 6.109448089560764],
		  [1.1865234375, 6.158134168061196],
		  [1.03271484375, 6.234589170386485],
		  [0.933837890625, 6.332872065842108],
		  [0.791015625, 6.442053330405442],
		  [0.714111328125, 6.5730398113581945],
		  [0.648193359375, 6.72581372578923],
		  [0.54931640625, 6.791273621594483],
		  [0.50537109375, 6.933072734145719],
		  [0.582275390625, 6.976694687480041],
		  [0.604248046875, 7.107536065343662],
		  [0.6591796875, 7.216542123820367],
		  [0.6591796875, 7.423580986248919],
		  [0.54931640625, 7.369106413086054],
		  [0.50537109375, 7.576073740079281],
		  [0.582275390625, 7.6849641597750145],
		  [0.648193359375, 7.80471136163048],
		  [0.59326171875, 7.967947633491558],
		  [0.582275390625, 8.18549455344362],
		  [0.7470703125, 8.27248024299783],
		  [0.68115234375, 8.392054181774837],
		  [0.59326171875, 8.533321348391821],
		  [0.362548828125, 8.772269406898898],
		  [0.54931640625, 8.848266300238533],
		  [0.439453125, 9.065313388771576],
		  [0.516357421875, 9.206323879509743],
		  [0.54656982421875, 9.33336736537918],
		  [0.56854248046875, 9.398406593067481],
		  [0.55206298828125, 9.422793157890089],
		  [0.525970458984375, 9.43634050546696],
		  [0.4998779296875, 9.434985794653103],
		  [0.503997802734375, 9.451241972902867],
		  [0.50262451171875, 9.474270244201993],
		  [0.4559326171875, 9.497296971037086],
		  [0.416107177734375, 9.494588024630845],
		  [0.3680419921875, 9.502714799563549],
		  [0.344696044921875, 9.494588024630845],
		  [0.336456298828125, 9.455305897552844],
		  [0.26092529296875, 9.430921630277611],
		  [0.2252197265625, 9.482397500805122],
		  [0.259552001953125, 9.476979351120892],
		  [0.2911376953125, 9.49052456485929],
		  [0.31036376953125, 9.509486964624676],
		  [0.284271240234375, 9.525739613539953],
		  [0.262298583984375, 9.520322149792745],
		  [0.23345947265625, 9.535219968242464],
		  [0.237579345703125, 9.574492913688278],
		  [0.262298583984375, 9.566367848610538],
		  [0.3350830078125, 9.578555373356105],
		  [0.358428955078125, 9.57178458024888],
		  [0.383148193359375, 9.588034256852247],
		  [0.37353515625, 9.611053299174694],
		  [0.38177490234375, 9.644901986299589],
		  [0.369415283203125, 9.669270937656893],
		  [0.3515625, 9.68010101615937],
		  [0.344696044921875, 9.718003538696156],
		  [0.319976806640625, 9.723417834658404],
		  [0.32684326171875, 9.761315449022936],
		  [0.330963134765625, 9.792442407297953],
		  [0.34332275390625, 9.816800600296395],
		  [0.352935791015625, 9.865511606965537],
		  [0.355682373046875, 9.922332011223736],
		  [0.391387939453125, 9.9426226271324],
		  [0.37078857421875, 9.962911983508498],
		  [0.362548828125, 10.033238632582115],
		  [0.37628173828125, 10.029181739964601],
		  [0.3955078125, 10.018363111339735],
		  [0.410614013671875, 10.022420139385279],
		  [0.416107177734375, 10.052170125837161],
		  [0.407867431640625, 10.072452638146375],
		  [0.372161865234375, 10.084621533545043],
		  [0.35430908203125, 10.088677729895336],
		  [0.355682373046875, 10.107605970344872],
		  [0.362548828125, 10.142755458159623],
		  [0.355682373046875, 10.177901088783987],
		  [0.361175537109375, 10.258991598864634],
		  [0.384521484375, 10.273855944422634],
		  [0.37353515625, 10.284665938597891],
		  [0.402374267578125, 10.315742609165545],
		  [0.384521484375, 10.315742609165545],
		  [0.3570556640625, 10.313040411637914],
		  [0.31585693359375, 10.310338190920042],
		  [0.339202880859375, 10.322498001489173],
		  [0.3350830078125, 10.340061342394424],
		  [0.319976806640625, 10.336008350847187],
		  [0.31585693359375, 10.358974610993034],
		  [0.292510986328125, 10.377886738430476],
		  [0.300750732421875, 10.410304867640694],
		  [0.28564453125, 10.425162051376178],
		  [0.25543212890625, 10.41300622645111],
		  [0.21697998046875, 10.425162051376178],
		  [0.20050048828125, 10.400322299710362],
		  [0.17578125, 10.438140403175062],
		  [0.142822265625, 10.521864103805452],
		  [0.0604248046875, 10.556967292045066],
		  [0.05767822265625, 10.597465990033827],
		  [-0.0494384765625, 10.63525994365502],
		  [-0.10162353515625, 10.702737493871993],
		  [-0.07415771484375, 10.713532510733474],
		  [-0.07415771484375, 10.76480357975497],
		  [-0.02197265625, 10.810670302696625],
		  [-0.02471923828125, 10.848437635560716],
		  [-0.0054931640625, 10.915867426529687],
		  [-0.0054931640625, 10.962500930136633],
		  [0.00823974609375, 10.963849158064976],
		  [0.0295257568359375, 10.973960671575778],
		  [0.0350189208984375, 10.983397772011523],
		  [0.0281524658203125, 11.056862003336118],
		  [0.0089263916015625, 11.079773691783673],
		  [-0.0034332275390625, 11.103357379441855],
		  [-0.01922607421875, 11.114811626350068],
		  [-0.042572021484375, 11.10537874980026],
		  [-0.06317138671875, 11.085164416708741],
		  [-0.0954437255859375, 11.089881219506323],
		  [-0.1263427734375, 11.10537874980026],
		  [-0.141448974609375, 11.10537874980026],
		  [-0.146942138671875, 11.11589596649572],
		  [-0.133209228515625, 11.137455600901948],
		  [-0.2801513671875, 11.179222845313173],
		  [-0.2911376953125, 11.148234819406285],
		  [-0.274658203125, 11.126675983142837],
		  [-0.3110504150390625, 11.116964511335615],
		  [-0.3357696533203125, 11.108542376871245],
		  [-0.34091949462890625, 11.086306774368971],
		  [-0.35396575927734375, 11.086306774368971],
		  [-0.35808563232421875, 11.069460495013146],
		  [-0.37078857421875, 11.08490120002543],
		  [-0.37353515625, 11.125328502868602],
		  [-0.39825439453125, 11.130718386566889],
		  [-0.428466796875, 11.119938519459785],
		  [-0.43670654296875, 11.081795225272437],
		  [-0.4387664794921875, 11.031926660994637],
		  [-0.4593658447265625, 11.028556857754126],
		  [-0.476531982421875, 11.039340092099271],
		  [-0.479278564453125, 11.02383906832552],
		  [-0.50262451171875, 11.01709923786892],
		  [-0.5074310302734375, 10.988790265407673],
		  [-0.528717041015625, 10.999574956510521],
		  [-0.5417633056640625, 10.990812425026844],
		  [-0.545196533203125, 10.9759829327661],
		  [-0.5500030517578125, 10.991486475153192],
		  [-0.5678558349609375, 10.99350861629086],
		  [-0.58502197265625, 10.965197379847382],
		  [-0.594635009765625, 10.924748055804807],
		  [-0.6172943115234375, 10.911263721810856],
		  [-0.6227874755859375, 10.937557605772177],
		  [-0.6488800048828125, 10.947670017497623],
		  [-0.6427001953125, 10.953737298844484],
		  [-0.6543731689453125, 10.964523269724461],
		  [-0.660552978515625, 10.955085566703993],
		  [-0.6708526611328125, 10.962500930136633],
		  [-0.6591796875, 10.97463476017718],
		  [-0.6516265869140625, 10.977331099202617],
		  [-0.652313232421875, 10.987442151295708],
		  [-0.6735992431640625, 10.992160523739365],
		  [-0.6777191162109375, 10.982049633269774],
		  [-0.6859588623046875, 10.988116209121543],
		  [-0.685272216796875, 10.998226891692575],
		  [-0.8074951171875, 10.997552856971954],
		  [-0.8054351806640625, 11.006315188111143],
		  [-0.82672119140625, 11.009011237576388],
		  [-0.8301544189453125, 10.998900924872125],
		  [-0.8548736572265625, 10.998900924872125],
		  [-0.8713531494140625, 10.96587148843361],
		  [-0.885772705078125, 10.963175044869002],
		  [-0.8878326416015625, 10.978679259486007],
		  [-0.9166717529296875, 10.980701488372368],
		  [-0.9173583984375, 11.002271067650755],
		  [-1.001129150390625, 10.998900924872125],
		  [-1.001129150390625, 11.007663215928416],
		  [-1.1144256591796875, 11.005641171889241],
		  [-1.116485595703125, 10.986768091930216],
		  [-1.388397216796875, 10.985419968580738],
		  [-1.4247894287109375, 11.021817135401466],
		  [-1.6156768798828125, 11.021143154671575],
		  [-1.616363525390625, 10.984071839073803],
		  [-1.690521240234375, 10.985419968580738],
		  [-1.6912078857421875, 10.97126430179276],
		  [-1.750946044921875, 10.97193839654495],
		  [-1.7502593994140625, 10.984745904596913],
  [-2.8399658203125, 11.014582292843404]]])

geoGH_download=str( [[[-2.84271240234375, 10.964407406892343],
		  [-2.81524658203125, 10.93204830297375],
		  [-2.8619384765625, 10.891594459751865],
		  [-2.889404296875, 10.783690724613116],
		  [-2.9443359375, 10.71083379257758],
		  [-2.90863037109375, 10.689243182249529],
		  [-2.95257568359375, 10.62716163281584],
		  [-2.9058837890625, 10.52726485464839],
		  [-2.86468505859375, 10.448944731763113],
		  [-2.77130126953125, 10.421933206636895],
		  [-2.8619384765625, 10.323616849342223],
		  [-2.7520751953125, 10.22632559332376],
		  [-2.8179931640625, 10.188482038665908],
		  [-2.7850341796875, 9.961326922955207],
		  [-2.735595703125, 9.842277522029486],
		  [-2.8070068359375, 9.728599402991875],
		  [-2.7520751953125, 9.66903825636035],
		  [-2.779541015625, 9.56613509648869],
		  [-2.7081298828125, 9.479455625458918],
		  [-2.7410888671875, 9.333134455664538],
		  [-2.6641845703125, 9.26808304825559],
		  [-2.7960205078125, 9.159637288435146],
		  [-2.7850341796875, 9.040308729266782],
		  [-2.6641845703125, 9.00775769070097],
		  [-2.6092529296875, 8.779818903544244],
		  [-2.515869140625, 8.203929637502366],
		  [-2.6202392578125, 8.13324302660295],
		  [-2.6806640625, 8.02990943258469],
		  [-2.7410888671875, 7.915668036108836],
		  [-2.779541015625, 7.9646325397584965],
		  [-2.83447265625, 7.839489477618971],
		  [-2.9168701171875, 7.648982348475696],
		  [-2.9937744140625, 7.2949591706812305],
		  [-2.9718017578125, 7.2295700052671],
		  [-3.0926513671875, 7.049701233586126],
		  [-3.251953125, 6.815222222102454],
		  [-3.2794189453125, 6.651564033219323],
		  [-3.0267333984375, 5.863603975677071],
		  [-3.043212890625, 5.710579321395293],
		  [-2.96356201171875, 5.716045197981245],
		  [-2.9827880859375, 5.653184478495978],
		  [-2.9443359375, 5.620384866252641],
		  [-2.867431640625, 5.647718005233668],
		  [-2.76580810546875, 5.587583406107884],
		  [-2.7301025390625, 5.355187750782526],
		  [-2.779541015625, 5.352453150739988],
		  [-2.7829742431640625, 5.276680660689631],
		  [-2.77679443359375, 5.25890327940111],
		  [-2.76580810546875, 5.243860483222971],
		  [-2.7637481689453125, 5.218560418171606],
		  [-2.758941650390625, 5.20009756427037],
		  [-2.7500152587890625, 5.198729923899719],
		  [-2.74658203125, 5.1645379513162695],
		  [-2.7307891845703125, 5.141286355747783],
		  [-2.7431488037109375, 5.123505150776171],
		  [-2.76031494140625, 5.108459129273213],
		  [-2.7870941162109375, 5.118033911163583],
		  [-2.8035736083984375, 5.113930450742871],
		  [-2.8173065185546875, 5.105039529632952],
		  [-2.823486328125, 5.120769536822237],
		  [-2.83447265625, 5.124189052435081],
		  [-2.838592529296875, 5.109143047012258],
		  [-2.8516387939453125, 5.115298273806442],
		  [-2.867431640625, 5.128292447012573],
		  [-2.890777587890625, 5.133079707351237],
		  [-2.89215087890625, 5.123505150776171],
		  [-2.9278564453125, 5.1248729533619555],
		  [-2.948455810546875, 5.129660239345242],
		  [-2.9560089111328125, 5.105039529632952],
		  [-2.9724884033203125, 5.10025205950784],
		  [-2.9937744140625, 5.118717818675223],
		  [-3.0095672607421875, 5.124189052435081],
		  [-3.11187744140625, 5.139117160783533],
		  [-3.11187744140625, 5.0898755229548955],
		  [-2.7520751953125, 5.021478113350183],
		  [-2.27691650390625, 4.9065543621082375],
		  [-2.2487640380859375, 4.879306219346514],
		  [-2.245330810546875, 4.8546761104108125],
		  [-2.2075653076171875, 4.838255537896997],
		  [-2.204132080078125, 4.8211503512890435],
		  [-2.1759796142578125, 4.812255483935228],
		  [-2.1746063232421875, 4.801992031004971],
		  [-2.1718597412109375, 4.788307186898774],
		  [-2.1636199951171875, 4.796518126268445],
		  [-2.1553802490234375, 4.79378115744099],
		  [-2.1196746826171875, 4.787622937499694],
		  [-2.1086883544921875, 4.775990593079715],
		  [-2.11212158203125, 4.766410867141555],
		  [-2.11212158203125, 4.75683100764787],
		  [-2.097015380859375, 4.748619593412709],
		  [-2.0935821533203125, 4.737670889057711],
		  [-2.0798492431640625, 4.74656672457246],
		  [-2.0647430419921875, 4.744513849624847],
		  [-2.05718994140625, 4.739723784344284],
		  [-2.04345703125, 4.752725312760706],
		  [-1.9933319091796875, 4.757515287749456],
		  [-1.9850921630859375, 4.753409596941137],
		  [-1.9782257080078125, 4.755462445404653],
		  [-1.9713592529296875, 4.76777940760151],
		  [-1.9411468505859375, 4.78351742673601],
		  [-1.934967041015625, 4.808150121318067],
		  [-1.91436767578125, 4.814308155958491],
		  [-1.9136810302734375, 4.825939847021319],
		  [-1.89239501953125, 4.824571423116963],
		  [-1.8848419189453125, 4.832097720432811],
		  [-1.856689453125, 4.847150064208675],
		  [-1.8354034423828125, 4.848518442484756],
		  [-1.808624267578125, 4.869043783536398],
		  [-1.772918701171875, 4.87383293975394],
		  [-1.746826171875, 4.877937903630787],
		  [-1.7475128173828125, 4.8854636055353104],
		  [-1.7351531982421875, 4.886831905898856],
		  [-1.7420196533203125, 4.890252644583061],
		  [-1.745452880859375, 4.9011988908909405],
		  [-1.73858642578125, 4.918302041597345],
		  [-1.7049407958984375, 4.933352450864703],
		  [-1.7049407958984375, 4.94908660476962],
		  [-1.69189453125, 4.962084101934849],
		  [-1.643829345703125, 4.968657574204802],
		  [-1.630096435546875, 4.991915381636319],
		  [-1.619110107421875, 5.024748528593368],
		  [-1.355438232421875, 5.072627233101678],
		  [-1.3458251953125, 5.089041973101215],
		  [-1.23870849609375, 5.099984900524659],
		  [-1.175537109375, 5.139651445943173],
		  [-1.09588623046875, 5.184786233557572],
		  [-0.80474853515625, 5.2162419067060934],
		  [-0.7525634765625, 5.265473704920039],
		  [-0.723724365234375, 5.283250898132045],
		  [-0.72509765625, 5.296925315162276],
		  [-0.624847412109375, 5.3229058733002015],
		  [-0.6097412109375, 5.350252643389027],
		  [-0.495758056640625, 5.377598191153183],
		  [-0.462799072265625, 5.4295513422895],
		  [-0.406494140625, 5.470563827447078],
		  [-0.3350830078125, 5.504738751751842],
		  [-0.20599365234375, 5.5438452698044305],
		  [-0.02197265625, 5.609451251001029],
		  [0.06317138671875, 5.696914401910348],
		  [0.37078857421875, 5.787096826137783],
		  [0.89813232421875, 5.7788990149807],
		  [0.97503662109375, 5.833548839091356],
		  [0.98602294921875, 5.920977461018268],
		  [1.043701171875, 6.002929234128989],
		  [1.1370849609375, 6.087599783708456],
		  [1.20025634765625, 6.109448089560764],
		  [1.1865234375, 6.158134168061196],
		  [1.03271484375, 6.234589170386485],
		  [0.933837890625, 6.332872065842108],
		  [0.791015625, 6.442053330405442],
		  [0.714111328125, 6.5730398113581945],
		  [0.648193359375, 6.72581372578923],
		  [0.54931640625, 6.791273621594483],
		  [0.50537109375, 6.933072734145719],
		  [0.582275390625, 6.976694687480041],
		  [0.604248046875, 7.107536065343662],
		  [0.6591796875, 7.216542123820367],
		  [0.6591796875, 7.423580986248919],
		  [0.54931640625, 7.369106413086054],
		  [0.50537109375, 7.576073740079281],
		  [0.582275390625, 7.6849641597750145],
		  [0.648193359375, 7.80471136163048],
		  [0.59326171875, 7.967947633491558],
		  [0.582275390625, 8.18549455344362],
		  [0.7470703125, 8.27248024299783],
		  [0.68115234375, 8.392054181774837],
		  [0.59326171875, 8.533321348391821],
		  [0.362548828125, 8.772269406898898],
		  [0.54931640625, 8.848266300238533],
		  [0.439453125, 9.065313388771576],
		  [0.516357421875, 9.206323879509743],
		  [0.54656982421875, 9.33336736537918],
		  [0.56854248046875, 9.398406593067481],
		  [0.55206298828125, 9.422793157890089],
		  [0.525970458984375, 9.43634050546696],
		  [0.4998779296875, 9.434985794653103],
		  [0.503997802734375, 9.451241972902867],
		  [0.50262451171875, 9.474270244201993],
		  [0.4559326171875, 9.497296971037086],
		  [0.416107177734375, 9.494588024630845],
		  [0.3680419921875, 9.502714799563549],
		  [0.344696044921875, 9.494588024630845],
		  [0.336456298828125, 9.455305897552844],
		  [0.26092529296875, 9.430921630277611],
		  [0.2252197265625, 9.482397500805122],
		  [0.259552001953125, 9.476979351120892],
		  [0.2911376953125, 9.49052456485929],
		  [0.31036376953125, 9.509486964624676],
		  [0.284271240234375, 9.525739613539953],
		  [0.262298583984375, 9.520322149792745],
		  [0.23345947265625, 9.535219968242464],
		  [0.237579345703125, 9.574492913688278],
		  [0.262298583984375, 9.566367848610538],
		  [0.3350830078125, 9.578555373356105],
		  [0.358428955078125, 9.57178458024888],
		  [0.383148193359375, 9.588034256852247],
		  [0.37353515625, 9.611053299174694],
		  [0.38177490234375, 9.644901986299589],
		  [0.369415283203125, 9.669270937656893],
		  [0.3515625, 9.68010101615937],
		  [0.344696044921875, 9.718003538696156],
		  [0.319976806640625, 9.723417834658404],
		  [0.32684326171875, 9.761315449022936],
		  [0.330963134765625, 9.792442407297953],
		  [0.34332275390625, 9.816800600296395],
		  [0.352935791015625, 9.865511606965537],
		  [0.355682373046875, 9.922332011223736],
		  [0.391387939453125, 9.9426226271324],
		  [0.37078857421875, 9.962911983508498],
		  [0.362548828125, 10.033238632582115],
		  [0.37628173828125, 10.029181739964601],
		  [0.3955078125, 10.018363111339735],
		  [0.410614013671875, 10.022420139385279],
		  [0.416107177734375, 10.052170125837161],
		  [0.407867431640625, 10.072452638146375],
		  [0.372161865234375, 10.084621533545043],
		  [0.35430908203125, 10.088677729895336],
		  [0.355682373046875, 10.107605970344872],
		  [0.362548828125, 10.142755458159623],
		  [0.355682373046875, 10.177901088783987],
		  [0.361175537109375, 10.258991598864634],
		  [0.384521484375, 10.273855944422634],
		  [0.37353515625, 10.284665938597891],
		  [0.402374267578125, 10.315742609165545],
		  [0.384521484375, 10.315742609165545],
		  [0.3570556640625, 10.313040411637914],
		  [0.31585693359375, 10.310338190920042],
		  [0.339202880859375, 10.322498001489173],
		  [0.3350830078125, 10.340061342394424],
		  [0.319976806640625, 10.336008350847187],
		  [0.31585693359375, 10.358974610993034],
		  [0.292510986328125, 10.377886738430476],
		  [0.300750732421875, 10.410304867640694],
		  [0.28564453125, 10.425162051376178],
		  [0.25543212890625, 10.41300622645111],
		  [0.21697998046875, 10.425162051376178],
		  [0.20050048828125, 10.400322299710362],
		  [0.17578125, 10.438140403175062],
		  [0.142822265625, 10.521864103805452],
		  [0.0604248046875, 10.556967292045066],
		  [0.05767822265625, 10.597465990033827],
		  [-0.0494384765625, 10.63525994365502],
		  [-0.10162353515625, 10.702737493871993],
		  [-0.07415771484375, 10.713532510733474],
		  [-0.07415771484375, 10.76480357975497],
		  [-0.02197265625, 10.810670302696625],
		  [-0.02471923828125, 10.848437635560716],
		  [-0.0054931640625, 10.915867426529687],
		  [-0.0054931640625, 10.962500930136633],
		  [0.00823974609375, 10.963849158064976],
		  [0.0295257568359375, 10.973960671575778],
		  [0.0350189208984375, 10.983397772011523],
		  [0.0281524658203125, 11.056862003336118],
		  [0.0089263916015625, 11.079773691783673],
		  [-0.0034332275390625, 11.103357379441855],
		  [-0.01922607421875, 11.114811626350068],
		  [-0.042572021484375, 11.10537874980026],
		  [-0.06317138671875, 11.085164416708741],
		  [-0.0954437255859375, 11.089881219506323],
		  [-0.1263427734375, 11.10537874980026],
		  [-0.141448974609375, 11.10537874980026],
		  [-0.146942138671875, 11.11589596649572],
		  [-0.133209228515625, 11.137455600901948],
		  [-0.2801513671875, 11.179222845313173],
		  [-0.2911376953125, 11.148234819406285],
		  [-0.274658203125, 11.126675983142837],
		  [-0.3110504150390625, 11.116964511335615],
		  [-0.3357696533203125, 11.108542376871245],
		  [-0.34091949462890625, 11.086306774368971],
		  [-0.35396575927734375, 11.086306774368971],
		  [-0.35808563232421875, 11.069460495013146],
		  [-0.37078857421875, 11.08490120002543],
		  [-0.37353515625, 11.125328502868602],
		  [-0.39825439453125, 11.130718386566889],
		  [-0.428466796875, 11.119938519459785],
		  [-0.43670654296875, 11.081795225272437],
		  [-0.4387664794921875, 11.031926660994637],
		  [-0.4593658447265625, 11.028556857754126],
		  [-0.476531982421875, 11.039340092099271],
		  [-0.479278564453125, 11.02383906832552],
		  [-0.50262451171875, 11.01709923786892],
		  [-0.5074310302734375, 10.988790265407673],
		  [-0.528717041015625, 10.999574956510521],
		  [-0.5417633056640625, 10.990812425026844],
		  [-0.545196533203125, 10.9759829327661],
		  [-0.5500030517578125, 10.991486475153192],
		  [-0.5678558349609375, 10.99350861629086],
		  [-0.58502197265625, 10.965197379847382],
		  [-0.594635009765625, 10.924748055804807],
		  [-0.6172943115234375, 10.911263721810856],
		  [-0.6227874755859375, 10.937557605772177],
		  [-0.6488800048828125, 10.947670017497623],
		  [-0.6427001953125, 10.953737298844484],
		  [-0.6543731689453125, 10.964523269724461],
		  [-0.660552978515625, 10.955085566703993],
		  [-0.6708526611328125, 10.962500930136633],
		  [-0.6591796875, 10.97463476017718],
		  [-0.6516265869140625, 10.977331099202617],
		  [-0.652313232421875, 10.987442151295708],
		  [-0.6735992431640625, 10.992160523739365],
		  [-0.6777191162109375, 10.982049633269774],
		  [-0.6859588623046875, 10.988116209121543],
		  [-0.685272216796875, 10.998226891692575],
		  [-0.8074951171875, 10.997552856971954],
		  [-0.8054351806640625, 11.006315188111143],
		  [-0.82672119140625, 11.009011237576388],
		  [-0.8301544189453125, 10.998900924872125],
		  [-0.8548736572265625, 10.998900924872125],
		  [-0.8713531494140625, 10.96587148843361],
		  [-0.885772705078125, 10.963175044869002],
		  [-0.8878326416015625, 10.978679259486007],
		  [-0.9166717529296875, 10.980701488372368],
		  [-0.9173583984375, 11.002271067650755],
		  [-1.001129150390625, 10.998900924872125],
		  [-1.001129150390625, 11.007663215928416],
		  [-1.1144256591796875, 11.005641171889241],
		  [-1.116485595703125, 10.986768091930216],
		  [-1.388397216796875, 10.985419968580738],
		  [-1.4247894287109375, 11.021817135401466],
		  [-1.6156768798828125, 11.021143154671575],
		  [-1.616363525390625, 10.984071839073803],
		  [-1.690521240234375, 10.985419968580738],
		  [-1.6912078857421875, 10.97126430179276],
		  [-1.750946044921875, 10.97193839654495],
		  [-1.7502593994140625, 10.984745904596913],
		  [-2.8399658203125, 11.014582292843404]]])

	 




def _ReadOptions(request):
 
		
			options = {}
			options["dataset"] = request.POST.get('dataset')
			options["datasource"] = request.POST.get('datasource')
			options["date_indices"]=request.POST.get('date_indices')
			
	   
			options["start"] = request.POST.get('start')
			options["end"] = request.POST.get('end')
			options["cloudscore"] = request.POST.get('cloudscore')
			options["region"] = json.loads(request.POST.get("region")) if request.POST.get("region") is not None else None
			options["filename"] = request.POST.get('filename')
			options["palette"] = request.POST.get('palette')
			options["scale"] = request.POST.get('scale',int(3000))
			options["name"] = request.POST.get('name')
			options["download"] = request.POST.get('download')
			options["date_year"] = request.POST.get('date_year')
			options["date_month"] = request.POST.get('date_month')
			options["Variable"] = request.POST.get('Variable')
			options["satelite"] = request.POST.get('satelite')
			
			options["chart_point"]= json.loads( request.POST.get('chart_point')) if request.POST.get("chart_point") is not None else None

			options["region_selected"]=request.POST.get('region_selected')

			options["indices"] = request.POST.get('indices')

			# TODO logic checking
			
			return options
	
def _Getcollection(options,palete):
	"""Creates a ee.Imagecollection with the given options. Also the ee.Algorithms.Landsat.simpleCloudScore is used
		on each image with the cloudscore from the options and the bands are reduced and renamed.
	Args:
	   options: a dict created by _ReadOptions()
		point: boolean if the point coordinates should be used to locate the Imagecollection
		region: boolean if the region coordinates should be used to locate the Imagecollection
	Returns:
		A ee.Imagecollection where each image has 2 bands RED and NIR and is cloudscore masked or None if collection is empty.
	"""
	
	global collection_info
	global date_info 
	global notes,name
	if options["dataset"]=='NDVI':
		notes= "NDVI calculated from Norm. Diff. of Near-IR and Red bands"
		name="NDVI" +"Target Peroid from :" + options["start"]+ " to "+ options["end"]
	elif options["dataset"]=='EVI':
		notes= "EVI calculated from Near-IR, Red and Blue bands"
		name="EVI" +"Target Peroid from :" + options["start"]+ " to "+ options["end"]
	elif options["dataset"]=='NDWI':
		notes= "NDWI calculated from Norm. Diff. of near-IR and mid-IR bands"
		name="NDWI" +"Target Peroid from :" + options["start"]+ " to "+ options["end"]


	date_info  = "Target Peroid from :" + options["start"]+ " to "+ options["end"]
	if options["datasource"]== 'M':
		 coll = get_modis_collection(options["dataset"],options,palete)

		 collection_info ="MODIS"
		 
	elif options["datasource"] == '8':
		 coll=get_landsat8_daily_collection(options["dataset"],options,palete)
		 collection_info ="Landsat 8"
	elif options["datasource"] == '7':
		 coll=get_landsat7_daily_collection(options["dataset"],options,palete)
		 collection_info ="Landsat 7"
	elif options["datasource"] == '5':
		 coll=get_landsat5_daily_collection(options["dataset"],options,palete)
		 collection_info ="Landsat 5"
	elif options["datasource"] == 'all':
		 coll=get_landsat457_daily_collection(options["dataset"],options,palete)
		 
		 collection_info ="Landsats 4/5/7"
		 
	
 
  # send number of images over Channel API to client
  #  _SendMessage(client_id,"collection-info","info","Your collection contains %s images." % collection_size, collection_line2)
	

	col={'mapid':coll['mapid'],'token':coll['token'] ,'collection_info': collection_info,'date_info':date_info,'notes':notes,'download_data':coll['download_data']}
 
	return col
	








def chart_it(options,palete):
	"""Creates a ee.Imagecollection with the given options. Also the ee.Algorithms.Landsat.simpleCloudScore is used
		on each image with the cloudscore from the options and the bands are reduced and renamed.
	Args:
	   options: a dict created by _ReadOptions()
		point: boolean if the point coordinates should be used to locate the Imagecollection
		region: boolean if the region coordinates should be used to locate the Imagecollection
	Returns:
		A ee.Imagecollection where each image has 2 bands RED and NIR and is cloudscore masked or None if collection is empty.
	"""
	chart_point=options['chart_point']
	print(chart_point)
	point_gh= ee.Geometry.Point(chart_point)
	global collection_info
	global date_info 
	global notes,name
	if options["dataset"]=='NDVI':
		notes= "NDVI calculated from Norm. Diff. of Near-IR and Red bands"
		name="NDVI" +"Target Peroid from :" + options["start"]+ " to "+ options["end"]
	elif options["dataset"]=='EVI':
		notes= "EVI calculated from Near-IR, Red and Blue bands"
		name="EVI" +"Target Peroid from :" + options["start"]+ " to "+ options["end"]
	elif options["dataset"]=='NDWI':
		notes= "NDWI calculated from Norm. Diff. of near-IR and mid-IR bands"
		name="NDWI" +"Target Peroid from :" + options["start"]+ " to "+ options["end"]

   
	date_info  = "Target Peroid from :" + options["start"]+ " to "+ options["end"]
	if options["datasource"]== 'M':
		 coll = get_modis_collection_chart(options["dataset"],options)

		 collection_info ="MODIS"
		 
	elif options["datasource"] == '8':
		 coll=get_landsat8_daily_collection_chart(options["dataset"],options,palete)
		 collection_info ="Landsat 8"
		 chart=get_time_series(options,coll,point,notes)
	elif options["datasource"] == '7':
		 coll=get_landsat7_daily_collection_chart(options["dataset"],options,palete)
		 chart=get_time_series(options,coll,point,notes)
		 collection_info ="Landsat 7"
	elif options["datasource"] == '5':
		 coll=get_landsat5_daily_collection_chart(options["dataset"],options,palete)
		 chart=get_time_series(options,coll,point,notes)
		 collection_info ="Landsat 5"
	elif options["datasource"] == 'all':
		 coll=get_landsat457_daily_collection_chart(options["dataset"],options,palete)
		 chart=get_time_series(options,coll, point_gh,notes)
		 print(chart)
		 collection_info ="Landsats 4/5/7"
		 
	
 
  # send number of images over Channel API to client
  #  _SendMessage(client_id,"collection-info","info","Your collection contains %s images." % collection_size, collection_line2)
	

	col=chart
 
	return col




def _SendMessage(client_id, id, style, line1, line2=None):
	"""Sends messages to the client over the Channel API

	Args:
		client_id: the clients channel api id
		id: id of the alert
		style: type of the alert for Bootstrap CSS styling
		line1: The first line of the alert text
		line2: optinal second line of the alert text
	"""
	params = {"id": id, "style": style, "line1": line1}

	if line2 is not None:
		params["line2"] = line2

	logging.info("Sent to client: " + json.dumps(params))
	channel.send_message(client_id, json.dumps(params))


 # Reduce a collection to a specific region or point (or both)
def filterRegions(collection,region):
		if region is not None:
			geometry = ee.Geometry.Polygon(region)
			
			return collection.filterBounds(geometry)
	   
		elif region is None :

			return collection.filterBounds(geometryGH)
		else:
			raise Exception("No location selected")

def palletedata(palettechoice,palette):
	palettendwi =','.join( ['#00008F', '#0000AC', '#0000CF', '#0000DF', '#0000EF', '#0000FF','#0010FF', '#0025FF', '#0040FF', '#0050FF', '#0070FF', '#0080FF','#009FFF',
					  '#009FFF', '#00AFFF', '#00BFFF', '#00D2FF','#00D2FF','#00DFFF','#00FFFF','#10FFEF','#30FFCF','#44FFBB','#6FFF90'
					  ,'#8FFF70','#AFFF50','#CFFF30','#DFFF20','#FFFF00','#FFDF00', '#FFCF00','#FFAF00','#FF9F00'
					   ,'#FF8000','#FF7000','#FF6000','#FF4000','#FF3000','#FF2000','#FF1000','#F70000','#EF0000','#DF0000','#CF0000','#BF0000','#AF0000','#9C0000','#8F0000','#860000','#800000'])

	palettehot=','.join(['#0B0000','#150000','#200000','#150000','#210000','#2B0000','#350000','#400000','#410000','#4A0000','#550000',
  '#560000','#600000','#6A0000','#750000','#760000','#800000','#890000',
  '#940000','#950000','#9F0000','#B40000','#B50000','#BF0000','#D40000','#D50000',
  '#DF0000','#EA0000','#EF0000','#F40000','#FD0000','#FF0A00','#FF1400','#FF1B00',
  '#FF2000','#FF3500','#FF3F00','#FF4400','#FF4A00','#FF5500','#FF5F00','#FF6000','#FF6900'
  ,'#FF6A00','#FF7500','#FF7D00','#FF8100','#FF8A00','#FF9500','#FF9E00','#FFA900','#FFB300','#FFB500','#FFBF00','#FFC900',
  '#FFD400','#FFD500','#FFDF00','#FFE900','#FFEA00','#FFFF00','#FFFF10','#FFFF20','#FFFF30','#FFFF3C','#FFFF3C',
  '#FFFF40','#FFFF67','#FFFF7B','#FFFF80','#FFFF8E','#FFFF93','#FFFFAD','#FFFFAF','#FFFFBF','#FFFFCF','#FFFFDF','#FFFFEF','#FFFFFC',
  '#FFFFFF' ])

	palettendvi=','.join( [
	  'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718',
	  '74A901', '66A000', '529400', '3E8601', '207401', '056201',
	  '004C00', '023B01', '012E01', '011D01', '011301'
  ])
	# A nice EVI palette.
	paletteevi =','.join( [
  'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718',
  '74A901', '66A000', '529400', '3E8601', '207401', '056201',
  '004C00', '023B01', '012E01', '011D01', '011301'])
	
	if palettechoice is None and palette is not None:
		ndwiViz = {'min': 0, 'max': 1, 'palette':palette}
		return ndwiViz 
	elif  palettechoice is not None and palette is None :
		ndwiViz = {'min': 0, 'max': 1, 'palette':palettendvi  if palettechoice=='NDVI' else paletteevi if palettechoice=='EVI' else palettendwi if palettechoice=='NDWI' else palettendvi}
		return ndwiViz

collection_line2 = None  # line2 of the information about the collection returned over the channel api


cdict = {'red':   ((0.0, 1.0, 1.0), 
				   (0.1, 1.0, 1.0),  # red 
				   (0.4, 1.0, 1.0),  # violet
				   (1.0, 0.0, 0.0)), # blue

		 'green': ((0.0, 0.0, 0.0),
				   (1.0, 0.0, 0.0)),

		 'blue':  ((0.0, 0.0, 0.0),
				   (0.1, 0.0, 0.0),  # red
				   (0.4, 1.0, 1.0),  # violet
				   (1.0, 1.0, 0.0))  # blue
		  }


def cloudMask(img,cloudscore):
	 
		cloud = ee.Algorithms.Landsat.simpleCloudScore(img).select("cloud")
		return img.updateMask(cloud.lt(cloudscore))


#===========================================
#    LANDSAT457 Daily
#===========================================
def get_landsat457_daily_collection(dataset,options,palete):
	"""Return the daily merged image collection for Landsat 4, 5, and 7

	Args:
		dataset: string indicating the dataset/band to return
			(NDVI, NDWI, or EVI)
	Returns:
		EarthEngine image collection object
		String of the collection name
		String of the collection description
		String of the input dataset
		String of additional notes about the collection
	"""


	 # rename the used option values
	source = options["datasource"]
	region=options["region"]
	start = options["start"]
	end = options["end"]
	cloudscore=options["cloudscore"]
	start = ee.ee_date.Date(start,'GMT')
	end = ee.Date(end, 'GMT') 
   
	
	sourceSwitch = {"land4": "LANDSAT/LT4_L1T_TOA", "land5": "LANDSAT/LT5_L1T_TOA", "land7": "LANDSAT/LE7_L1T_TOA"}
   
 


	## This string could/should be built based on the date range or looking at
	##   or looking atthe images in the collection
	coll_name = 'LT4_L1T_TOA,LT5_L1T_TOA,LE7_L1T_TOA'
	coll_desc = 'Landsat 4/5/7 Daily {0} (cloud mask applied)'.format(dataset)
	var_desc = dataset

 
  

		# select only the images that were took between start and end
	land5 = ee.ImageCollection(sourceSwitch["land4"]) 
	land7 = ee.ImageCollection(sourceSwitch["land5"])
	land8 = ee.ImageCollection(sourceSwitch["land7"])

		# only select the images that intersect with the coordinates of point or region
	land5 = filterRegions(land5,region)
	land7 = filterRegions(land7,region)
	land8 = filterRegions(land8,region)

			
	# use the simpleCloudScore algorithm on each collection

		# merge the 3 collections
	collection = ee.ImageCollection(land5.merge(land7))
	collection = ee.ImageCollection(collection.merge(land8)).filterDate(start ,end)
	collection=collection.map(landsat457_cloud_mask_func)
	ndwiViz=palete
	if dataset == 'NDVI':
		notes = "NDVI calculated from Norm. Diff. of Near-IR and Red bands"
		dfm=collection.map(landsat457_ndvi_func).mean() 
		print(region)
		if region is not None:
			geometry =ee.Geometry.Polygon(region)
			mapid=ee.Image(dfm).clip(geometry).getMapId(ndwiViz)
			download= getData(dfm, options["download"],options["scale"],options["name"])
			print(download)
			mapid['download_data']=download
		else:
			mapid=ee.Image(dfm).clip(geometryGH).getMapId(ndwiViz)
			download= getData(dfm,geoGH_download,options["scale"],options["name"])
			print(download)
			mapid['download_data']=download
		
		return mapid

	elif dataset == 'NDWI':
		notes = "NDWI calculated from Norm. Diff. of near-IR and mid-IR bands"
		dfm=collection.map(landsat457_ndwi_func).mean()  
		if region is not None:
			
			geometry =ee.Geometry.Polygon(region)
			mapid=ee.Image(dfm).clip(geometry).getMapId(ndwiViz)
			download= getData(dfm, options["download"],options["scale"],options["name"])
			mapid['download_data']=download
		else:
			mapid=ee.Image(dfm).clip(geometryGH).getMapId(ndwiViz)
			download= getData(dfm, geoGH_download,options["scale"],options["name"])
			mapid['download_data']=download
		return mapid

	elif dataset == 'EVI':
		notes = "EVI calculated from Near-IR, Red and Blue bands"
		dfm=collection.map(landsat457_evi_func).mean()  
		if region is not None:
			geometry = ee.Geometry.Polygon(region)
			mapid=ee.Image(dfm).clip(geometry).getMapId(ndwiViz)
			download= getData(dfm, options["download"],options["scale"],options["name"])
			mapid['download_data']=download
		else:
			mapid=ee.Image(dfm).clip(geometryGH).getMapId(ndwiViz)
			download= getData(dfm,geoGH_download,options["scale"],options["name"])
			mapid['download_data']=download
		return mapid
	## How should this function fail gracefully if the inputs are bad?
	## Should it return an exception?
	else:
		notes = ''
		return collection.select(dataset)

	# Check if the collection conatins images if not return none
	collection_size = collection.size().getInfo()
	print(collection_size + 'checked if its nothin')
	if collection_size == 0:
		return None
 
	# send number of images over Channel API to client


#===========================================
#    LANDSAT5 Daily
#===========================================
def get_landsat5_daily_collection(dataset,options,palete):
	"""Return the daily image collection for only Landsat 5

	Args:
		dataset: string indicating the dataset/band to return
			(NDVI, NDWI, or EVI)
	Returns:
		EarthEngine image collection object
		String of the collection name
		String of the collection description
		String of the input dataset
		String of additional notes about the collection
	"""
	
	source = options["datasource"]
	start = options["start"]
	end = options["end"]
	region= options["region"]
	start = ee.Date(start, 'GMT')
	end = ee.Date(end, 'GMT')
	coll_name = 'LANDSAT/LT5_L1T_TOA'
	coll_desc = 'Landsat 5, daily {0} (cloud mask applied)'.format(dataset)
	var_desc = dataset
	## Select dataset after calculating index
	collection = ee.ImageCollection(coll_name).filterDate(start,end)
   
	collection = filterRegions(collection,region)
	ndwiViz=palete
	if dataset == 'NDVI':
		notes = "NDSI calculated from Norm. Diff. of Near-IR and Red bands"
		
		dfm=collection.map(landsat457_ndvi_func).mean()  
		if region is not None:
			geometry = ee.Geometry.Polygon(region)
			mapid=ee.Image(dfm).clip(geometry).getMapId(ndwiViz)
			download= getData(dfm, options["download"],options["scale"],options["name"])
			mapid['download_data']=download
		else:
			mapid=ee.Image(dfm).clip(geometryGH).getMapId(ndwiViz)
			download= getData(dfm,geoGH_download,options["scale"],options["name"])
			mapid['download_data']=download
		
		return mapid
	elif dataset == 'NDSI':
		notes = "NDSI calculated from Norm. Diff. of Green and mid-IR bands"
		collection.map(landsat457_ndsi_func)
		print(collection.getMapId(ndwiViz))
		return collection.getMapId(ndwiViz) 
	elif dataset == 'NDWI':
		notes = "NDWI calculated from Norm. Diff. of near-IR and mid-IR bands"     
		dfm=collection.map(landsat457_ndwi_func).mean()  
		if region is not None:
			geometry = ee.Geometry.Polygon(region)
			mapid=ee.Image(dfm).clip(geometry).getMapId(ndwiViz)
			download= getData(dfm, options["download"],options["scale"],options["name"])
			mapid['download_data']=download
		else:
			mapid=ee.Image(dfm).clip(geometryGH).getMapId(ndwiViz)
			download= getData(dfm,geoGH_download,options["scale"],options["name"])
			mapid['download_data']=download
		
		return mapid
	elif dataset == 'EVI':
		notes = "EVI calculated from Near-IR, Red and Blue bands"
		dfm=collection.map(landsat457_evi_func).mean()  
		if region is not None:
			geometry = ee.Geometry.Polygon(region)
			mapid=ee.Image(dfm).clip(geometry).getMapId(ndwiViz)
			download= getData(dfm, options["download"],options["scale"],options["name"])
			mapid['download_data']=download
		else:
			mapid=ee.Image(dfm).clip(geometryGH).getMapId(ndwiViz)
			download= getData(dfm,geoGH_download,options["scale"],options["name"])
			mapid['download_data']=download
		
		return mapid
	## How should this function fail gracefully if the inputs are bad?
	## Should it return an exception?
	else:
	  notes = ''
	  collection.select(dataset)
	  print(collection.getMapId(ndwiViz))
	  return collection.getMapId(ndwiViz) 





#===========================================
#    LANDSAT7 Daily
#===========================================
def get_landsat7_daily_collection(dataset,options,palete):
	"""Return the daily image collection for only Landsat 7

	Args:
		dataset: string indicating the dataset/band to return
			(NDVI, NDSI, NDWI, or EVI)
	Returns:
		EarthEngine image collection object
		String of the collection name
		String of the collection description
		String of the input dataset
		String of additional notes about the collection
	"""

	source = options["datasource"]
	start = options["start"]
	end = options["end"]
	region= options["region"]
	
	start = ee.Date(start, 'GMT')
	end = ee.Date(end, 'GMT')

	palettejet = ['#00008F', '#0000AC', '#0000CF', '#0000DF', '#0000EF', '#0000FF',
			   '#0010FF', '#0025FF', '#0040FF', '#0050FF', '#0070FF', '#0080FF',
			   '#009FFF', '#009FFF', '#00AFFF', '#00BFFF', '#00D2FF','#00D2FF','#00DFFF','#00FFFF',
			   '#10FFEF','#30FFCF','#44FFBB','#6FFF90','#8FFF70','#AFFF50','#CFFF30','#DFFF20','#FFFF00','#FFDF00',
			   '#FFCF00','#FFAF00','#FF9F00','#FF8000','#FF7000','#FF6000','#FF4000','#FF3000','#FF2000',
			   '#FF1000','#F70000','#EF0000','#DF0000','#CF0000','#BF0000','#AF0000','#9C0000','#8F0000','#860000',
			   '#800000']


	coll_name = 'LE7_L1T_TOA'
	coll_desc = 'Landsat 7, daily {0} (cloud mask applied)'.format(dataset)
	var_desc = dataset
	## Select dataset after calculating index
	collection = ee.ImageCollection(coll_name).filterDate(start,end)
	collection=collection.map(landsat457_cloud_mask_func)
	ndwiViz=palete
	if region is not None:
		 collection.filterBounds(region)

	else: 
		collection.filterBounds(geometryGH)



	if dataset == 'NDVI':
		notes = "NDVI calculated from Norm. Diff. of Near-IR and Red bands"    
		dfm=collection.map(landsat457_ndvi_func).mean()  
		if region is not None:
			geometry = ee.Geometry.Polygon(region)
			mapid=ee.Image(dfm).clip(geometry).getMapId(ndwiViz)
			download= getData(dfm, options["download"],options["scale"],options["name"])
			mapid['download_data']=download
		else:
			mapid=ee.Image(dfm).clip(geometryGH).getMapId(ndwiViz)
			download= getData(dfm,geoGH_download,options["scale"],options["name"])
			mapid['download_data']=download
		
		return mapid
	elif dataset == 'NDWI':
		notes = "NDWI calculated from Norm. Diff. of near-IR and mid-IR bands"
		dfm=collection.map(landsat457_ndwi_func).mean()  
		if region is not None:
			geometry = ee.Geometry.Polygon(region)
			mapid=ee.Image(dfm).clip(geometry).getMapId(ndwiViz)
			download= getData(dfm, options["download"],options["scale"],options["name"])
			mapid['download_data']=download
		else:
			mapid=ee.Image(dfm).clip(geometryGH).getMapId(ndwiViz)
			download= getData(dfm,geoGH_download,options["scale"],options["name"])
			mapid['download_data']=download
		
		return mapid
	elif dataset == 'EVI':
		notes = "EVI calculated from Near-IR, Red and Blue bands"
		dfm=collection.map(landsat457_evi_func).mean()  
		if region is not None:
			geometry = ee.Geometry.Polygon(region)
			mapid=ee.Image(dfm).clip(geometry).getMapId(ndwiViz)
			download= getData(dfm, options["download"],options["scale"],options["name"])
			mapid['download_data']=download
		else:
			mapid=ee.Image(dfm).clip(geometryGH).getMapId(ndwiViz)
			download= getData(dfm,geoGH_download,options["scale"],options["name"])
			mapid['download_data']=download
		
		return mapid
	## How should this function fail gracefully if the inputs are bad?
	## Should it return an exception?
	else:
		notes = ''
		collection.select(dataset)
		return collection.getMapId() 




#===========================================
#    LANDSAT8 Daily
#===========================================
def get_landsat8_daily_collection(dataset,options,palete):
	"""Return the daily image collection for only Landsat 8

	Args:
		dataset: string indicating the dataset/band to return
			(NDVI, NDSI, NDWI, or EVI)
	Returns:
		EarthEngine image collection object
		String of the collection name
		String of the collection description
		String of the input dataset
		String of additional notes about the collection
	"""
	 # rename the used option values
	source = options["datasource"]
	start = options["start"]
	end = options["end"]
	region= options["region"]           

	
	start = ee.Date(start, 'GMT')
	end = ee.Date(end, 'GMT')    
		   

  
	ndwiViz=palete
	palettejet = ['#00008F', '#0000AC', '#0000CF', '#0000DF', '#0000EF', '#0000FF',
			   '#0010FF', '#0025FF', '#0040FF', '#0050FF', '#0070FF', '#0080FF',
			   '#009FFF', '#009FFF', '#00AFFF', '#00BFFF', '#00D2FF','#00D2FF','#00DFFF','#00FFFF',
			   '#10FFEF','#30FFCF','#44FFBB','#6FFF90','#8FFF70','#AFFF50','#CFFF30','#DFFF20','#FFFF00','#FFDF00',
			   '#FFCF00','#FFAF00','#FF9F00','#FF8000','#FF7000','#FF6000','#FF4000','#FF3000','#FF2000',
			   '#FF1000','#F70000','#EF0000','#DF0000','#CF0000','#BF0000','#AF0000','#9C0000','#8F0000','#860000',
			   '#800000']

	coll_name = 'LC8_L1T_TOA'
	coll_desc = 'Landsat 8, daily {0} (cloud mask applied)'.format(dataset)
	var_desc = dataset
	collection = ee.ImageCollection(coll_name).filterDate(start,end)
	collection = filterRegions(collection,region)
	## Select dataset after calculating index
   
	
	## Need to code in Landsat 8 cloud masking
	##collection = ee.Imagecollection(coll_name).map(landsat8_cloud_mask_func)
	if dataset == 'NDVI':
		notes = "NDSI calculated from Norm. Diff. of Near-IR and Red bands"    
		dfm=collection.map(landsat8_ndvi_func).mean()  
		if region is not None:
			geometry = ee.Geometry.Polygon(region)
			mapid=ee.Image(dfm).clip(geometry).getMapId(ndwiViz)
			download= getData(dfm, options["download"],options["scale"],options["name"])
			mapid['download_data']=download
		else:
			mapid=ee.Image(dfm).clip(geometryGH).getMapId(ndwiViz)
			download= getData(dfm,geoGH_download,options["scale"],options["name"])
			mapid['download_data']=download
		
		return mapid
	elif dataset == 'NDSI':
		notes = "NDSI calculated from Norm. Diff. of Green and mid-IR bands"
		dfm=collection.map(landsat8_ndvi_func).mean()  
		if region is not None:
			geometry = ee.Geometry.Polygon(region)
			mapid=ee.Image(dfm).clip(geometry).getMapId(ndwiViz)
		else:
			mapid=ee.Image(dfm).clip(geometryGH).getMapId(ndwiViz)
		
		return mapid
	elif dataset == 'NDWI':
		notes = "NDWI calculated from Norm. Diff. of near-IR and mid-IR bands"
		dfm=collection.map(landsat8_ndwi_func).mean()  
		if region is not None:
			geometry =ee.Geometry.Polygon(region)
			mapid=ee.Image(dfm).clip(geometry).getMapId(ndwiViz)
			download= getData(dfm, options["download"],options["scale"],options["name"])
			mapid['download_data']=download
		else:
			mapid=ee.Image(dfm).clip(geometryGH).getMapId(ndwiViz)
			download= getData(dfm,geoGH_download,options["scale"],options["name"])
			mapid['download_data']=download
		
		return mapid
	elif dataset == 'EVI':
		notes = "EVI calculated from Near-IR, Red and Blue bands"
		dfm=collection.map(landsat8_evi_func).mean()  
		if region is not None:
			geometry = ee.Geometry.Polygon(region)
			mapid=ee.Image(dfm).clip(geometry).getMapId(ndwiViz)
			download= getData(dfm, options["download"],options["scale"],options["name"])
			mapid['download_data']=download
		else:
			mapid=ee.Image(dfm).clip(geometryGH).getMapId(ndwiViz)
			download= getData(dfm,geoGH_download,options["scale"],options["name"])
			mapid['download_data']=download
		
		return mapid
	## How should this function fail gracefully if the inputs are bad?
	## Should it return an exception?
	else:
		collection.select(dataset)
		return collection.getMapId() 

#===========================================
#    MODIS 
#===========================================
def get_modis_collection(dataset,options,palete):
	"""Return the 8 or 16 day composite image collection for MODIS

	Args:
		dataset: string indicating the dataset/band to return
			(LST_Day_1km, NDVI, NDSI, NDWI, or EVI)
	Returns:
		EarthEngine image collection object
		String of the collection name
		String of the collection description
		String of the input dataset
		String of additional notes about the collection
	"""
	coll_name = 'MCD43A4_{0}'.format(dataset)
	coll_desc = 'MODIS 16-day {0}'.format(dataset)
	var_desc = dataset
	 # rename the used option values
	
	start = options["start"]
	end = options["end"]
	region= options["region"]
	
	start = ee.Date(start, 'GMT')
	end = ee.Date(end, 'GMT')
	collection = ee.ImageCollection(coll_name).filterDate(start,end)


	ndwiViz=palete
	if dataset == 'NDVI':
		notes = "NDSI calculated from Norm. Diff. of Near-IR and Red bands"
		dfm=collection.select(dataset).mean()  
		if region is not None:
			geometry = ee.Geometry.Polygon(region)
			mapid=ee.Image(dfm).clip(geometry).getMapId(ndwiViz)
			download= getData(dfm, options["download"],options["scale"],options["name"])
			mapid['download_data']=download
		else:
			mapid=ee.Image(dfm).clip(geometryGH).getMapId(ndwiViz)
			download= getData(dfm,geoGH_download,options["scale"],options["name"])
			mapid['download_data']=download 
		return mapid

	elif dataset == 'NDWI':
		notes = "NDWI calculated from Norm. Diff. of near-IR and mid-IR bands"

		dfm=collection.select(dataset).mean()  
		if region is not None:
			geometry = ee.Geometry.Polygon(region)
			mapid=ee.Image(dfm).clip(geometry).getMapId(ndwiViz)
			download= getData(dfm, options["download"],options["scale"],options["name"])
			mapid['download_data']=download
		else:
			mapid=ee.Image(dfm).clip(geometryGH).getMapId(ndwiViz)
			download= getData(dfm,geoGH_download,options["scale"],options["name"])
			mapid['download_data']=download 
		return mapid



	elif dataset == 'EVI':
		notes = "EVI calculated from Near-IR,Red and Blue bands"
		dfm=collection.select(dataset).mean()  
		if region is not None:
			geometry = ee.Geometry.Polygon(region)
			mapid=ee.Image(dfm).clip(geometry).getMapId(ndwiViz)
			download= getData(dfm, options["download"],options["scale"],options["name"])
			mapid['download_data']=download
		else:
			mapid=ee.Image(dfm).clip(geometryGH).getMapId(ndwiViz)
			download= getData(dfm,geoGH_download,options["scale"],options["name"])
			mapid['download_data']=download 
		return mapid
 
   

			

   
   ## return collection, coll_name, coll_desc, var_desc, notes
   


   
#===========================================
#   chart
#===========================================


def get_modis_collection_chart(dataset,options,palete):
	"""Return the 8 or 16 day composite image collection for MODIS

	Args:
		dataset: string indicating the dataset/band to return
			(LST_Day_1km, NDVI, NDSI, NDWI, or EVI)
	Returns:
		EarthEngine image collection object
		String of the collection name
		String of the collection description
		String of the input dataset
		String of additional notes about the collection
	"""
	coll_name = 'MCD43A4_{0}'.format(dataset)
	coll_desc = 'MODIS 16-day {0}'.format(dataset)
	var_desc = dataset
	 # rename the used option values
	
	start = options["start"]
	end = options["end"]
	region= options["region"]
	
	start = ee.Date(start, 'GMT')
	end = ee.Date(end, 'GMT')
	collection = ee.ImageCollection(coll_name).filterDate(start,end)


	ndwiViz=palete
	if dataset == 'NDVI':
		notes = "NDSI calculated from Norm. Diff. of Near-IR and Red bands"
		dfm=ee.ImageCollection(collection.select(dataset).mean()  )

		return dfm

	elif dataset == 'NDWI':
		notes = "NDWI calculated from Norm. Diff. of near-IR and mid-IR bands"

		dfm=ee.ImageCollection(collection.select(dataset).mean()  ) 

		return dfm



	elif dataset == 'EVI':
		notes = "EVI calculated from Near-IR,Red and Blue bands"
		dfm=ee.ImageCollection(collection.select(dataset).mean()  ) 

		return dfm
 
   


def get_landsat457_daily_collection_chart(dataset,options,palete):
	"""Return the daily merged image collection for Landsat 4, 5, and 7

	Args:
		dataset: string indicating the dataset/band to return
			(NDVI, NDWI, or EVI)
	Returns:
		EarthEngine image collection object
		String of the collection name
		String of the collection description
		String of the input dataset
		String of additional notes about the collection
	"""


	 # rename the used option values
	source = options["datasource"]
	region=options["region"]
	start = options["start"]
	end = options["end"]
	cloudscore=options["cloudscore"]
	start = ee.ee_date.Date(start,'GMT')
	end = ee.Date(end, 'GMT') 
   
	
	sourceSwitch = {"land4": "LANDSAT/LT4_L1T_TOA", "land5": "LANDSAT/LT5_L1T_TOA", "land7": "LANDSAT/LE7_L1T_TOA"}
   
 

	## This string could/should be built based on the date range or looking at
	##   or looking atthe images in the collection
	coll_name = 'LT4_L1T_TOA,LT5_L1T_TOA,LE7_L1T_TOA'
	coll_desc = 'Landsat 4/5/7 Daily {0} (cloud mask applied)'.format(dataset)
	var_desc = dataset

 
  

		# select only the images that were took between start and end
	land5 = ee.ImageCollection(sourceSwitch["land4"]) 
	land7 = ee.ImageCollection(sourceSwitch["land5"])
	land8 = ee.ImageCollection(sourceSwitch["land7"])

		# only select the images that intersect with the coordinates of point or region
	land5 = filterRegions(land5,region)
	land7 = filterRegions(land7,region)
	land8 = filterRegions(land8,region)

			
	# use the simpleCloudScore algorithm on each collection

		# merge the 3 collections
	collection = ee.ImageCollection(land5.merge(land7))
	collection = ee.ImageCollection(collection.merge(land8)).filterDate(start ,end)
	collection=collection.map(landsat457_cloud_mask_func)
	ndwiViz=palete
	if dataset == 'NDVI':
		notes = "NDVI calculated from Norm. Diff. of Near-IR and Red bands"
		dfm= ee.ImageCollection(collection.map(landsat457_ndvi_func))

		return dfm

	elif dataset == 'NDWI':
		notes = "NDWI calculated from Norm. Diff. of near-IR and mid-IR bands"
		dfm=collection.map(landsat457_ndwi_func)

		return dfm

	elif dataset == 'EVI':
		notes = "EVI calculated from Near-IR, Red and Blue bands"
		dfm= collection.map(landsat457_evi_func)

		return dfm
	## How should this function fail gracefully if the inputs are bad?
	## Should it return an exception?
	else:
		notes = ''
		return collection.select(dataset)

	# Check if the collection conatins images if not return none
	collection_size = collection.size().getInfo()
	print(collection_size + 'checked if its nothin')
	if collection_size == 0:
		return None














def get_landsat5_daily_collection_chart(dataset,options,palete):
	"""Return the daily image collection for only Landsat 5

	Args:
		dataset: string indicating the dataset/band to return
			(NDVI, NDWI, or EVI)
	Returns:
		EarthEngine image collection object
		String of the collection name
		String of the collection description
		String of the input dataset
		String of additional notes about the collection
	"""
	
	source = options["datasource"]
	start = options["start"]
	end = options["end"]
	region= options["region"]
	start = ee.Date(start, 'GMT')
	end = ee.Date(end, 'GMT')
	coll_name = 'LANDSAT/LT5_L1T_TOA'
	coll_desc = 'Landsat 5, daily {0} (cloud mask applied)'.format(dataset)
	var_desc = dataset
	## Select dataset after calculating index
	collection = ee.ImageCollection(coll_name).filterDate(start,end)
   
	collection = filterRegions(collection,region)
	ndwiViz=palete
	if dataset == 'NDVI':
		notes = "NDSI calculated from Norm. Diff. of Near-IR and Red bands"
		
		dfm= collection.map(landsat457_ndvi_func)

		return dfm

	elif dataset == 'NDWI':
		notes = "NDWI calculated from Norm. Diff. of near-IR and mid-IR bands"     
		dfm=   collection.map(landsat457_ndwi_func)

		return dfm
	elif dataset == 'EVI':
		notes = "EVI calculated from Near-IR, Red and Blue bands"
		dfm= collection.map(landsat457_evi_func)

		return dfm
	## How should this function fail gracefully if the inputs are bad?
	## Should it return an exception?
	else:
	  notes = ''
	  collection.select(dataset)
	  print(collection.getMapId(ndwiViz))
	  return collection.getMapId(ndwiViz) 










def get_landsat7_daily_collection_chart(dataset,options,palete):
	"""Return the daily image collection for only Landsat 7

	Args:
		dataset: string indicating the dataset/band to return
			(NDVI, NDSI, NDWI, or EVI)
	Returns:
		EarthEngine image collection object
		String of the collection name
		String of the collection description
		String of the input dataset
		String of additional notes about the collection
	"""

	source = options["datasource"]
	start = options["start"]
	end = options["end"]
	region= options["region"]
	
	start = ee.Date(start, 'GMT')
	end = ee.Date(end, 'GMT')




	coll_name = 'LE7_L1T_TOA'
	coll_desc = 'Landsat 7, daily {0} (cloud mask applied)'.format(dataset)
	var_desc = dataset
	## Select dataset after calculating index
	collection = ee.ImageCollection(coll_name).filterDate(start,end)
	collection=collection.map(landsat457_cloud_mask_func)
	ndwiViz=palete
	if region is not None:
		 collection.filterBounds(region)

	else: 
		collection.filterBounds(geometryGH)



	if dataset == 'NDVI':
		notes = "NDVI calculated from Norm. Diff. of Near-IR and Red bands"    
		dfm= collection.map(landsat457_ndvi_func)

		return dfm
	elif dataset == 'NDWI':
		notes = "NDWI calculated from Norm. Diff. of near-IR and mid-IR bands"
		dfm=  collection.map(landsat457_ndwi_func)

		return dfm
	elif dataset == 'EVI':
		notes = "EVI calculated from Near-IR, Red and Blue bands"
		dfm= collection.map(landsat457_evi_func)

		return dfm
	## How should this function fail gracefully if the inputs are bad?
	## Should it return an exception?
	else:
		notes = ''
		collection.select(dataset)
		return collection.getMapId() 





def get_landsat8_daily_collection_chart(dataset,options,palete):
	"""Return the daily image collection for only Landsat 8

	Args:
		dataset: string indicating the dataset/band to return   for chart
			(NDVI, NDWI, or EVI)
	Returns:
		EarthEngine image collection object
		String of the collection name
		String of the collection description
		String of the input dataset
		String of additional notes about the collection
	"""
	 # rename the used option values
	source = options["datasource"]
	start = options["start"]
	end = options["end"]
	region= options["region"]           

	
	start = ee.Date(start, 'GMT')
	end = ee.Date(end, 'GMT')   
		   

  
	ndwiViz=palete
   

	coll_name = 'LC8_L1T_TOA'
	coll_desc = 'Landsat 8, daily {0} (cloud mask applied)'.format(dataset)
	var_desc = dataset
	collection = ee.ImageCollection(coll_name).filterDate(start,end)
	collection = filterRegions(collection,region)
	## Select dataset after calculating index
   
	
	## Need to code in Landsat 8 cloud masking
	##collection = ee.Imagecollection(coll_name).map(landsat8_cloud_mask_func)
	if dataset == 'NDVI':
		notes = "NDSI calculated from Norm. Diff. of Near-IR and Red bands"    
		dfm = collection.map(landsat8_ndvi_func)  

		return dfm

	elif dataset == 'NDWI':
		notes = "NDWI calculated from Norm. Diff. of near-IR and mid-IR bands"
		dfm=  collection.map(landsat8_ndwi_func)
		return dfm
	elif dataset == 'EVI':
		notes = "EVI calculated from Near-IR, Red and Blue bands"
		dfm=   collection.map(landsat8_evi_func)

		return dfm
	## How should this function fail gracefully if the inputs are bad?
	## Should it return an exception?
	else:
		collection.select(dataset)
		return collection.getMapId() 






#===========================================
#    collection Functions
#===========================================
property_list = ['system:index','system:time_start', 'system:time_end']
def landsat457_cloud_mask_func(img):
	"""Apply basic ACCA cloud mask to a daily Landsat 4, 5, or 7 image"""
	cloud_mask = ee.Algorithms.Landsat.simpleCloudScore(img).\
		select(['cloud']).lt(ee.Image.constant(50))
	return img.mask(cloud_mask.mask(cloud_mask))



def landsat457_ndvi_func(img):
	"""Calculate NDVI for a daily Landsat 4, 5, or 7 image"""
	## Remove .clamp(-0.1, 1)
	return img.normalizedDifference(["B4","B3"]).select([0], ['NDVI'])\
		.copyProperties(img, property_list)

def landsat457_ndsi_func(img):
	"""Calculate NDSI for a daily Landsat 4, 5, or 7 image"""
	## Removed .clamp(-0.1, 1)
	return img.normalizedDifference(["B2", "B5"]).select([0], ['NDSI'])\
		.copyProperties(img, property_list)

def landsat457_ndwi_func(img):
	"""Calculate NDWI (Gao 1996 formulation) for a daily Landsat 4, 5, or 7 image"""
	## Removed .clamp(-0.1, 1)
	return img.normalizedDifference(["B4", "B5"]).select([0], ['NDWI'])\
		.copyProperties(img, property_list)

def landsat457_evi_func(img):
	"""Calculate EVI for a daily Landsat 4, 5, or 7 image"""
	return img.expression('(2.5 * (b("B4") - b("B3"))) / (b("B4") + 6 * b("B3") - 7.5 * b("B1") + 1)')\
		.select([0], ['EVI']).copyProperties(img, property_list)

## DEADBEEF - Need to code in Landsat 8 cloud masking
def landsat8_cloud_mask_func(img):
	return img

def landsat8_ndvi_func(img):
	"""Calculate NDVI for a daily Landsat 8 image"""
	## Removed .clamp(-0.1, 1)
	return img.normalizedDifference(["B5","B4"]).select([0], ['NDVI'])\
		.copyProperties(img, property_list)

def landsat8_ndsi_func(img):
	"""Calculate NDSI for a daily Landsat 8 image"""
	## Removed .clamp(-0.1, 1)
	return img.normalizedDifference(["B3","B6"]).select([0], ['NDSI'])\
		.copyProperties(img, property_list)

def landsat8_ndwi_func(img):
	"""Calculate NDWI for a daily Landsat 8 image"""
	## Removed .clamp(-0.1, 1)
	return img.normalizedDifference(["B6","B5"]).select([0], ['NDWI'])\
		.copyProperties(img, property_list)

def landsat8_evi_func(img):
	"""Calculate EVI for a daily Landsat 8 image"""
	##This formulation should be double checked
	return img.expression('(2.5 * (b("B5") - b("B4"))) / (b("B5") + 6 * b("B4") - 7.5 * b("B2") + 1)')\
		.select([0], ['EVI']).copyProperties(img, property_list)




def landsat457_cloud_mask_func(img):
	"""Apply basic ACCA cloud mask to a daily Landsat 4, 5, or 7 image"""
	cloud_mask = ee.Algorithms.Landsat.simpleCloudScore(img).\
		select(['cloud']).lt(ee.Image.constant(50))
	return img.mask(cloud_mask.mask(cloud_mask))

#===========================================
#   MAP_collection
#===========================================
def map_collection(collection, opacity, palette, minColorbar, maxColorbar):
	""""""
	colorbarOptions = {
		'min':minColorbar,
		'max':maxColorbar,
		'palette':palette,
		'opacity':opacity, #range [0,1]
	}
	mapid = collection

   
	return mapid





#===========================================
#    Chart Functions
#===========================================

def _GetChart2(options):
	"""Generates html code for a small chart and prepares the creation of a full sceen view by saving
		the chart options under a unique id in the Memcache.
	Args:
		options: a option dic created by _ReadOptions()
	Returns:
		Html code with the small chart view or None if collection is empty.
	"""
	regression = options["regression"]
	point = options["point"]
	start = options["start"]
	end = options["end"]

	collection = _GetCollection(options,region=False)  # only use point to filter region

	# _GetCollection() returns None if collection is empty
	if collection is None:
		return None

	# Generates an image with a band "nd" that contains the NDVI
	# and a band "system:time_start" that contains the creation date of the image as seconds since epoch
	def calcValues(img):
		return (img.select()
				.addBands(img.metadata("system:time_start").divide(1000).floor())  # convert to seconds
				.addBands(img.normalizedDifference(["NIR","RED"])))  # NDVI

	collection = collection.map(calcValues)

	# Extracts the pixel values at a specific point and adds them as array called "vlaues" to the image properties
	def getValues(img):
		# useing that the mean reducer only got one value because the poi_geometry is just a point
		return img.reduceRegions(ee.Geometry.Point(point), ee.Reducer.mean(),EXPORT_RESOLUTION).makeArray(["system:time_start","nd"],"values")

	# Creates a list of arrays like [[<image1 epoch seconds>,<image1 ndvi>],[<image2 epoch seconds>,<image2 ndvi>],...]
	# aggregate_array also filters the masked pixels out
	raw_data = ee.FeatureCollection(collection.map(getValues)).flatten().aggregate_array("values").getInfo()


	# style information for the different chart types
	if regression == "zhuWood":

		# get the regression coefficients at the point of interest (makes chart creation a lot slower)
		image = _GetImage(options)
		coeff = image.reduceRegion(ee.Reducer.mean(),ee.Geometry.Point(point),EXPORT_RESOLUTION).getInfo()

		coeff_map = {"a0":coeff["a0_sec"],"a1":coeff["a1_sec"],"a2":coeff["a2_sec"],"a3":coeff["a3_sec"],"rmse":coeff["rmse"]}
		# describe xAxis and yAxis
		description = [("Date","date"),("NDVI", "number"),("Regression: a0=%(a0)s, a1=%(a1)s, a2=%(a2)s, a3=%(a3)s, rmse=%(rmse)s" % coeff_map,"number")]

		hAxis = """{title:"Date"},"""
		chartArea = "{width: \"75%\"}"
		per = "Date"

		# start and end epoch seconds of the collection
		seconds_start = calendar.timegm(time.strptime("%s-01-01" % start, "%Y-%m-%d"))
		seconds_end = calendar.timegm(time.strptime("%s-12-31T23:59:59" % end, "%Y-%m-%dT%H:%M:%S"))

		# convert raw_data to data
		data = []
		for x in raw_data:
			seconds = x[0]
			ndvi = x[1]

			# convert epoch seconds to datetime object
			# not using the seconds because the Google Visualization API can display dates nicely
			data.append([datetime.utcfromtimestamp(seconds),ndvi,None])


		# calculate and add the values of the regression every 45 days
		for x in range(seconds_start,seconds_end,45*24*60*60):
			offset = x - seconds_start

			# calculate the regression ndvi value
			reg_ndvi = coeff["a0_sec"] + coeff["a1_sec"] * math.cos((2*math.pi/(365*24*60*60))*offset) + coeff["a2_sec"] * math.sin((2*math.pi/(365*24*60*60))*offset) + coeff["a3_sec"] * offset

			# convert time_struct to datetime and add it with the regression value to the data
			data.append([datetime(*time.gmtime(x)[:6]),None,reg_ndvi])

		trendline = """legend:{position:"bottom"},series:{1:{lineWidth: 1}},"""
	else:
		hAxis = """{title:"DOY",minValue:0,maxValue:365},"""
		chartArea = "{width: \"50%\"}"
		per = "DOY"

		# is for all points to display the regression (0_ prefix so it is always the first)
		reg_name = "0_%s" % regression
		yAxis = {reg_name:"number"}
		for year in range(start,end + 1):
			# add yAxis description per year
			yAxis[str(year)] = "number"

		# DataTable description
		description = {("DOY","number"): yAxis}

		data = {}
		for x in raw_data:
			# converts epoch seconds to day of year
			date = datetime.utcfromtimestamp(x[0])
			doy = date.timetuple().tm_yday

			year = str(date.timetuple().tm_year)

			data[doy] = {reg_name:x[1],year:x[1]}

		degree = {"poly1":1,"poly2":2,"poly3":3}
		# hide dataset that holds all points and only display the regression for it
		trendline = """series:{0:{visibleInLegend: false}},trendlines:{0:{type:"polynomial",degree:%s,showR2: true, visibleInLegend: true}},""" % degree[regression]



	# Create the DataTable and load the data into it
	# more details about the Google Visualization API at https://developers.google.com/chart/interactive/docs/reference
	data_table = gviz_api.DataTable(description)
	data_table.LoadData(data)

	# Creating a JavaScript code string that represents the chart
	jscode = data_table.ToJSCode("data")

	# Create temporary chart id
	chart_id = _GetUniqueString()

	# Set request options as chart options, and add some extra values
	chart_options = options.copy()
	chart_options.update({"jscode":jscode,"lat":point[1],"lon":point[0],"trendline":trendline,"hAxis":hAxis,"chart_id":chart_id,"chartArea":chartArea,"per":per})

	# Save the chart options temporary in Memcache
	memcache.set(chart_id,chart_options)

	if len(jscode) < 31000:  # max 32767 chars per channel api message
		# Load small chart template
		f = open("templates/small_chart.html", "r")
		small_chart = f.read()
		f.close()

		# Fill in chart options an return template
		return small_chart % chart_options
	else:
		return """No small chart available.<br><a href="/chart?id=%(chart_id)s" target="_blank">Full screen url (only temporary valid)</a>""" % chart_options


#============================
#    Download Map
#============================

def getData(collection,geometry,scale,name):
	path=collection.getDownloadUrl({
		'name': name,
		'scale':scale,
		'crs':'EPSG:4326',
		'region':str( geometry )
		
		})
	return path